export interface FeeQuote {
    symbol: string;
    address: string;
    decimal: number;
    logoUrl: string;
    tokenGasPrice: number;
    offset: number;
    payment: string;
    refundReceiver: string;
    tokenBalance: string;
}
export declare type Transaction = {
    to: string;
    value?: string;
    data?: string;
    nonce?: number | string;
    gasLimit?: number | string;
};
export interface RequestArguments {
    method: string;
    params?: any[];
}
export interface JsonRpcRequest extends RequestArguments {
    id: number | string;
    jsonrpc: string;
}
export interface IEthereumProvider {
    on(event: string, listener: any): void;
    once(event: string, listener: any): void;
    off(event: string, listener: any): void;
    removeListener(event: string, listener: any): void;
    request(request: Partial<JsonRpcRequest>): Promise<any>;
}
export interface Account {
    isDeployed: boolean;
    chainId: number;
    eoaAddress: string;
    factoryAddress: string;
    entryPointAddress: string;
    smartAccountAddress: string;
    owner: string;
    index: number;
    implementationAddress: string;
    fallBackHandlerAddress: string;
    version: string;
}
export interface UserOperation {
    sender: string;
    nonce: string;
    initCode: string;
    callData: string;
    callGasLimit: string;
    verificationGasLimit: string;
    maxFeePerGas: string;
    maxPriorityFeePerGas: string;
    paymasterAndData: string;
    preVerificationGas: string;
    signature: string;
}
export interface GaslessTransaction {
    userOp: UserOperation;
    userOpHash: string;
}
export interface NetworkConfig {
    dappAPIKey: string;
    chainId: number;
}
export interface SmartAccountConfig {
    projectId: string;
    clientKey: string;
    appId: string;
    networkConfig: NetworkConfig[];
}
export interface UserPaidTransaction {
    walletTransaction: WalletTransaction;
    typedData: {
        [key: string]: any;
    };
}
export interface WalletTransaction {
    to: string;
    value: number;
    data: string;
    operation: number;
    targetTxGas: number;
    baseGas: number;
    gasPrice: string;
    tokenGasPriceFactor: number;
    gasToken: string;
    refundReceiver: string;
    nonce: number;
}
