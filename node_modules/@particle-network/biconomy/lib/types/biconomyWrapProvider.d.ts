import { SmartAccount } from './smartAccount';
import type { FeeQuote, IEthereumProvider, JsonRpcRequest } from './types';
export declare enum SendTransactionMode {
    UserSelect = 0,
    Gasless = 1,
    UserPaidNative = 2
}
export declare enum SendTransactionEvent {
    Request = "RequestSendTransaction",
    Resolve = "ResolveSendTransaction",
    Reject = "RejectSendTransaction"
}
export declare class BiconomyWrapProvider implements IEthereumProvider {
    private smartAccount;
    private sendTxMode;
    private events;
    constructor(smartAccount: SmartAccount, sendTxMode?: SendTransactionMode);
    /**
     * when receive SendTransactionEvent.Request event, call this method to continue sending the transaction.
     *
     * @see SendTransactionEvent
     * @param feeQuote optional, if undefined, send transaction gasless, or send transaction user paid
     */
    resolveSendTransaction(feeQuote?: FeeQuote): void;
    /**
     * when receive SendTransactionEvent.Request event, call this method to reject the transaction.
     *
     * @param error reject error message
     */
    rejectSendTransaction(error: Error): void;
    on(event: string, listener: any): void;
    once(event: string, listener: any): void;
    off(event: string, listener: any): void;
    removeListener(event: string, listener: any): void;
    enable(): Promise<string[]>;
    request(payload: Partial<JsonRpcRequest>): Promise<any>;
}
