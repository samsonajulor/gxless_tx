import type { Account, FeeQuote, GaslessTransaction, IEthereumProvider, RequestArguments, SmartAccountConfig, Transaction, UserPaidTransaction, WalletTransaction } from './types';
import { UserOperation } from './types';
export declare class SmartAccount {
    provider: IEthereumProvider;
    private config;
    constructor(provider: IEthereumProvider, config: SmartAccountConfig);
    private connection;
    private getChainId;
    private getDappAPIKey;
    private checkCurrentChain;
    getFeeQuotes(tx: Transaction | Transaction[]): Promise<FeeQuote[]>;
    createUserPaidTransaction(tx: Transaction | Transaction[], feeQuote: FeeQuote): Promise<UserPaidTransaction>;
    sendUserPaidSignedTransaction(walletTx: WalletTransaction, signature: string): Promise<string>;
    sendUserPaidTransaction(tx: Transaction | Transaction[], feeQuote: FeeQuote): Promise<string>;
    createGaslessTransaction(tx: Transaction | Transaction[]): Promise<GaslessTransaction>;
    sendGaslessSignedTransaction(userOp: UserOperation, signature: string): Promise<string>;
    sendGaslessTransaction(tx: Transaction | Transaction[]): Promise<string>;
    getAccount(): Promise<Account>;
    getAddress(): Promise<string>;
    getOwner(): Promise<string>;
    isDeployed(): Promise<boolean>;
    deployWalletContract(): Promise<string>;
    sendRpc<T>(arg: RequestArguments): Promise<T>;
}
