{
  "version": 3,
  "sources": ["../src/index.ts", "../src/biconomyWrapProvider.ts", "../src/smartAccount.ts", "../src/utils.ts"],
  "sourcesContent": ["export { BiconomyWrapProvider, SendTransactionMode, SendTransactionEvent } from './biconomyWrapProvider';\nexport { SmartAccount } from './smartAccount';\n", "import EventEmitter from 'events';\nimport { SmartAccount } from './smartAccount';\nimport type { FeeQuote, IEthereumProvider, JsonRpcRequest } from './types';\n\nexport enum SendTransactionMode {\n    UserSelect = 0,\n    Gasless = 1,\n    UserPaidNative = 2,\n}\n\nexport enum SendTransactionEvent {\n    Request = 'RequestSendTransaction',\n    Resolve = 'ResolveSendTransaction',\n    Reject = 'RejectSendTransaction',\n}\n\nexport class BiconomyWrapProvider implements IEthereumProvider {\n    private events = new EventEmitter();\n    constructor(\n        private smartAccount: SmartAccount,\n        private sendTxMode: SendTransactionMode = SendTransactionMode.UserPaidNative\n    ) {\n        this.events.setMaxListeners(100);\n\n        if (!Object.values(SendTransactionMode).includes(sendTxMode)) {\n            throw new Error(`sendTxMode value error, must in ${Object.values(SendTransactionMode)}`);\n        }\n    }\n\n    /**\n     * when receive SendTransactionEvent.Request event, call this method to continue sending the transaction.\n     *\n     * @see SendTransactionEvent\n     * @param feeQuote optional, if undefined, send transaction gasless, or send transaction user paid\n     */\n    resolveSendTransaction(feeQuote?: FeeQuote) {\n        this.events.emit(SendTransactionEvent.Resolve, feeQuote);\n    }\n\n    /**\n     * when receive SendTransactionEvent.Request event, call this method to reject the transaction.\n     *\n     * @param error reject error message\n     */\n    rejectSendTransaction(error: Error) {\n        this.events.emit(SendTransactionEvent.Reject, error);\n    }\n\n    on(event: string, listener: any): void {\n        if (SendTransactionEvent.Request === event) {\n            this.events.on(event, listener);\n        } else {\n            this.smartAccount.provider.on(event, listener);\n        }\n    }\n\n    once(event: string, listener: any): void {\n        if (SendTransactionEvent.Request === event) {\n            this.events.once(event, listener);\n        } else {\n            this.smartAccount.provider.once(event, listener);\n        }\n    }\n\n    off(event: string, listener: any): void {\n        if (SendTransactionEvent.Request === event) {\n            this.events.off(event, listener);\n        } else {\n            this.smartAccount.provider.off(event, listener);\n        }\n    }\n\n    removeListener(event: string, listener: any): void {\n        if (SendTransactionEvent.Request === event) {\n            this.events.removeListener(event, listener);\n        } else {\n            this.smartAccount.provider.removeListener(event, listener);\n        }\n    }\n\n    enable(): Promise<string[]> {\n        return this.request({\n            method: 'eth_requestAccounts',\n        });\n    }\n\n    async request(payload: Partial<JsonRpcRequest>): Promise<any> {\n        if (payload.method === 'eth_requestAccounts' || payload.method === 'eth_accounts') {\n            await this.smartAccount.provider.request(payload);\n            const address = await this.smartAccount.getAddress();\n            return [address];\n        } else if (payload.method === 'eth_sendTransaction') {\n            if (!payload.params) {\n                return Promise.reject(new Error('send transaction param error'));\n            }\n            const txData = payload.params[0];\n\n            if (this.sendTxMode === SendTransactionMode.UserPaidNative) {\n                const feeQuotes = await this.smartAccount.getFeeQuotes(txData);\n                return this.smartAccount.sendUserPaidTransaction(txData, feeQuotes[0]);\n            } else if (this.sendTxMode === SendTransactionMode.Gasless) {\n                return this.smartAccount.sendGaslessTransaction(txData);\n            }\n            const feeQuotes = await this.smartAccount.getFeeQuotes(txData);\n            return new Promise((resolve, reject) => {\n                this.events.removeAllListeners(SendTransactionEvent.Reject);\n                this.events.removeAllListeners(SendTransactionEvent.Resolve);\n                this.events.once(SendTransactionEvent.Resolve, async (feeQuote?: FeeQuote) => {\n                    let txHash;\n                    try {\n                        if (feeQuote) {\n                            //send transaction user paid.\n                            txHash = await this.smartAccount.sendUserPaidTransaction(txData, feeQuote);\n                        } else {\n                            //send transaction gas less.\n                            txHash = await this.smartAccount.sendGaslessTransaction(txData);\n                        }\n                        resolve(txHash);\n                    } catch (error) {\n                        reject(error);\n                    }\n                });\n                this.events.once(SendTransactionEvent.Reject, reject);\n                this.events.emit(SendTransactionEvent.Request, feeQuotes);\n            });\n        }\n\n        return this.smartAccount.provider.request(payload);\n    }\n}\n", "import axios from 'axios';\nimport type {\n    Account,\n    FeeQuote,\n    GaslessTransaction,\n    IEthereumProvider,\n    RequestArguments,\n    SmartAccountConfig,\n    Transaction,\n    UserPaidTransaction,\n    WalletTransaction,\n} from './types';\nimport { UserOperation } from './types';\nimport { payloadId, rpcUrl } from './utils';\n\nexport class SmartAccount {\n    constructor(public provider: IEthereumProvider, private config: SmartAccountConfig) {}\n\n    private connection = axios.create({\n        baseURL: `${rpcUrl()}/evm-chain`,\n        timeout: 60_000,\n    });\n\n    private getChainId = async (): Promise<string> => {\n        return await this.provider.request({ method: 'eth_chainId' });\n    };\n\n    private async getDappAPIKey(): Promise<string> {\n        const chainId = await this.getChainId();\n        const networkConfig = this.config.networkConfig.find((item) => item.chainId === Number(chainId));\n        if (networkConfig) {\n            return networkConfig.dappAPIKey;\n        }\n        return Promise.reject(\n            new Error(`Current chain is not supported, chainId: ${chainId}, please configure it first`)\n        );\n    }\n\n    private async checkCurrentChain() {\n        await this.getDappAPIKey();\n    }\n\n    async getFeeQuotes(tx: Transaction | Transaction[]): Promise<FeeQuote[]> {\n        await this.checkCurrentChain();\n\n        const eoa = (await this.provider.request({ method: 'eth_accounts' }))[0];\n        const feeQuotes = await this.sendRpc<FeeQuote[]>({\n            method: 'particle_biconomy_getFeeQuotes',\n            params: ['1.0.0', eoa, Array.isArray(tx) ? tx : [tx]],\n        });\n        return feeQuotes;\n    }\n\n    async createUserPaidTransaction(tx: Transaction | Transaction[], feeQuote: FeeQuote): Promise<UserPaidTransaction> {\n        await this.checkCurrentChain();\n\n        const eoas = await this.provider.request({ method: 'eth_accounts' });\n        return await this.sendRpc<UserPaidTransaction>({\n            method: 'particle_biconomy_createUserPaidTransaction',\n            params: ['1.0.0', eoas[0], Array.isArray(tx) ? tx : [tx], feeQuote],\n        });\n    }\n\n    async sendUserPaidSignedTransaction(walletTx: WalletTransaction, signature: string): Promise<string> {\n        await this.checkCurrentChain();\n\n        const eoas = await this.provider.request({ method: 'eth_accounts' });\n        const hash = await this.sendRpc<string>({\n            method: 'particle_biconomy_sendUserPaidTransaction',\n            params: ['1.0.0', eoas[0], walletTx, signature],\n        });\n        return hash;\n    }\n\n    async sendUserPaidTransaction(tx: Transaction | Transaction[], feeQuote: FeeQuote): Promise<string> {\n        await this.checkCurrentChain();\n\n        const eoas = await this.provider.request({ method: 'eth_accounts' });\n        const userPaidTx = await this.createUserPaidTransaction(tx, feeQuote);\n        const signature = await this.provider.request({\n            method: 'eth_signTypedData_v4',\n            params: [eoas[0], JSON.stringify(userPaidTx.typedData)],\n        });\n        return this.sendUserPaidSignedTransaction(userPaidTx.walletTransaction, signature);\n    }\n\n    async createGaslessTransaction(tx: Transaction | Transaction[]): Promise<GaslessTransaction> {\n        const apiKey = await this.getDappAPIKey();\n        const eoas = await this.provider.request({ method: 'eth_accounts' });\n        const gaslessTx = await this.sendRpc<GaslessTransaction>({\n            method: 'particle_biconomy_createGaslessTransaction',\n            params: ['1.0.0', eoas[0], Array.isArray(tx) ? tx : [tx], apiKey],\n        });\n        return gaslessTx;\n    }\n\n    async sendGaslessSignedTransaction(userOp: UserOperation, signature: string): Promise<string> {\n        const apiKey = await this.getDappAPIKey();\n        const eoas = await this.provider.request({ method: 'eth_accounts' });\n        return await this.sendRpc<string>({\n            method: 'particle_biconomy_sendGaslessTransaction',\n            params: [\n                '1.0.0',\n                eoas[0],\n                {\n                    ...userOp,\n                    signature,\n                },\n                apiKey,\n            ],\n        });\n    }\n\n    async sendGaslessTransaction(tx: Transaction | Transaction[]): Promise<string> {\n        const gaslessTx = await this.createGaslessTransaction(tx);\n        const eoas = await this.provider.request({ method: 'eth_accounts' });\n        const signature = await this.provider.request({\n            method: 'personal_sign',\n            params: [gaslessTx.userOpHash, eoas[0]],\n        });\n\n        return await this.sendGaslessSignedTransaction(gaslessTx.userOp, signature);\n    }\n\n    async getAccount(): Promise<Account> {\n        const eoas = await this.provider.request({ method: 'eth_accounts' });\n        const accounts = await this.sendRpc<Account[]>({\n            method: 'particle_biconomy_getSmartAccount',\n            params: ['1.0.0', eoas],\n        });\n        return accounts[0];\n    }\n\n    async getAddress(): Promise<string> {\n        const eoas = await this.provider.request({ method: 'eth_accounts' });\n        if (!eoas || eoas.length === 0) {\n            return '';\n        }\n        if (typeof window !== 'undefined' && localStorage) {\n            const localAA = localStorage.getItem(`particle_biconomy_${eoas[0]}`);\n            if (localAA) {\n                return localAA;\n            }\n        }\n\n        const account = await this.getAccount();\n        const address = account.smartAccountAddress;\n        if (typeof window !== 'undefined' && localStorage) {\n            localStorage.setItem(`particle_biconomy_${eoas[0]}`, address);\n        }\n        return address;\n    }\n\n    async getOwner(): Promise<string> {\n        const eoas = await this.provider.request({ method: 'eth_accounts' });\n        return eoas[0];\n    }\n\n    async isDeployed(): Promise<boolean> {\n        const account = await this.getAccount();\n        return account.isDeployed;\n    }\n\n    async deployWalletContract(): Promise<string> {\n        return await this.sendGaslessTransaction({\n            to: '0x0000000000000000000000000000000000000000',\n            data: '0x',\n        });\n    }\n\n    async sendRpc<T>(arg: RequestArguments): Promise<T> {\n        const chainId = await this.getChainId();\n        const response = await this.connection\n            .post(\n                '',\n                {\n                    ...arg,\n                    id: payloadId(),\n                    jsonrpc: '2.0',\n                },\n                {\n                    params: {\n                        chainId: Number(chainId),\n                        projectUuid: this.config.projectId,\n                        projectKey: this.config.clientKey,\n                    },\n                }\n            )\n            .then((res) => res.data);\n        if (response.error) {\n            return Promise.reject(response.error);\n        } else {\n            return response.result;\n        }\n    }\n}\n", "export const rpcUrl = (): string => {\n    const productionApi = 'https://rpc.particle.network';\n    const developmentApi = 'https://rpc-debug.particle.network';\n    //@ts-ignore\n    const dev = typeof window !== 'undefined' && window.__PARTICLE_ENVIRONMENT__ === 'development';\n    return dev ? developmentApi : productionApi;\n};\n\nexport function payloadId(): number {\n    const date = Date.now() * Math.pow(10, 3);\n    const extra = Math.floor(Math.random() * Math.pow(10, 3));\n    return date + extra;\n}\n"],
  "mappings": "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",
  "names": ["SendTransactionMode", "SendTransactionEvent", "EventEmitter", "feeQuotes", "axios"]
}
